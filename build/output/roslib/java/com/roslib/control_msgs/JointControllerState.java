package com.roslib.control_msgs;

import java.lang.*;

public class JointControllerState implements com.roslib.ros.Msg {
    public com.roslib.std_msgs.Header header;
    public double set_point;
    public double process_value;
    public double process_value_dot;
    public double error;
    public double time_step;
    public double command;
    public double p;
    public double i;
    public double d;
    public double i_clamp;

    public JointControllerState() {
        this.header = new com.roslib.std_msgs.Header();
        this.set_point = 0;
        this.process_value = 0;
        this.process_value_dot = 0;
        this.error = 0;
        this.time_step = 0;
        this.command = 0;
        this.p = 0;
        this.i = 0;
        this.d = 0;
        this.i_clamp = 0;
    }

    public int serialize(byte[] outbuffer, int start) {
        int offset = start;
        offset = this.header.serialize(outbuffer, offset);
        long bits_set_point = Double.doubleToRawLongBits(this.set_point);
        outbuffer[offset + 0] = (byte)((bits_set_point >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_set_point >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_set_point >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_set_point >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_set_point >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_set_point >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_set_point >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_set_point >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_process_value = Double.doubleToRawLongBits(this.process_value);
        outbuffer[offset + 0] = (byte)((bits_process_value >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_process_value >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_process_value >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_process_value >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_process_value >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_process_value >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_process_value >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_process_value >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_process_value_dot = Double.doubleToRawLongBits(this.process_value_dot);
        outbuffer[offset + 0] = (byte)((bits_process_value_dot >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_process_value_dot >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_process_value_dot >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_process_value_dot >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_process_value_dot >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_process_value_dot >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_process_value_dot >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_process_value_dot >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_error = Double.doubleToRawLongBits(this.error);
        outbuffer[offset + 0] = (byte)((bits_error >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_error >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_error >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_error >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_error >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_error >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_error >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_error >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_time_step = Double.doubleToRawLongBits(this.time_step);
        outbuffer[offset + 0] = (byte)((bits_time_step >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_time_step >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_time_step >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_time_step >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_time_step >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_time_step >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_time_step >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_time_step >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_command = Double.doubleToRawLongBits(this.command);
        outbuffer[offset + 0] = (byte)((bits_command >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_command >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_command >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_command >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_command >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_command >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_command >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_command >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_p = Double.doubleToRawLongBits(this.p);
        outbuffer[offset + 0] = (byte)((bits_p >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_p >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_p >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_p >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_p >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_p >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_p >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_p >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_i = Double.doubleToRawLongBits(this.i);
        outbuffer[offset + 0] = (byte)((bits_i >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_i >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_i >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_i >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_i >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_i >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_i >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_i >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_d = Double.doubleToRawLongBits(this.d);
        outbuffer[offset + 0] = (byte)((bits_d >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_d >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_d >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_d >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_d >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_d >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_d >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_d >> (8 * 7)) & 0xFF);
        offset += 8;
        long bits_i_clamp = Double.doubleToRawLongBits(this.i_clamp);
        outbuffer[offset + 0] = (byte)((bits_i_clamp >> (8 * 0)) & 0xFF);
        outbuffer[offset + 1] = (byte)((bits_i_clamp >> (8 * 1)) & 0xFF);
        outbuffer[offset + 2] = (byte)((bits_i_clamp >> (8 * 2)) & 0xFF);
        outbuffer[offset + 3] = (byte)((bits_i_clamp >> (8 * 3)) & 0xFF);
        outbuffer[offset + 4] = (byte)((bits_i_clamp >> (8 * 4)) & 0xFF);
        outbuffer[offset + 5] = (byte)((bits_i_clamp >> (8 * 5)) & 0xFF);
        outbuffer[offset + 6] = (byte)((bits_i_clamp >> (8 * 6)) & 0xFF);
        outbuffer[offset + 7] = (byte)((bits_i_clamp >> (8 * 7)) & 0xFF);
        offset += 8;
        return offset;
    }

    public int deserialize(byte[] inbuffer, int start) {
        int offset = start;
        offset = this.header.deserialize(inbuffer, offset);
        long bits_set_point = 0;
        bits_set_point |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_set_point |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_set_point |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_set_point |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_set_point |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_set_point |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_set_point |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_set_point |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.set_point = Double.longBitsToDouble(bits_set_point);
        offset += 8;
        long bits_process_value = 0;
        bits_process_value |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_process_value |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_process_value |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_process_value |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_process_value |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_process_value |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_process_value |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_process_value |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.process_value = Double.longBitsToDouble(bits_process_value);
        offset += 8;
        long bits_process_value_dot = 0;
        bits_process_value_dot |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_process_value_dot |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_process_value_dot |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_process_value_dot |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_process_value_dot |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_process_value_dot |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_process_value_dot |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_process_value_dot |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.process_value_dot = Double.longBitsToDouble(bits_process_value_dot);
        offset += 8;
        long bits_error = 0;
        bits_error |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_error |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_error |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_error |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_error |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_error |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_error |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_error |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.error = Double.longBitsToDouble(bits_error);
        offset += 8;
        long bits_time_step = 0;
        bits_time_step |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_time_step |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_time_step |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_time_step |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_time_step |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_time_step |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_time_step |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_time_step |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.time_step = Double.longBitsToDouble(bits_time_step);
        offset += 8;
        long bits_command = 0;
        bits_command |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_command |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_command |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_command |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_command |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_command |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_command |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_command |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.command = Double.longBitsToDouble(bits_command);
        offset += 8;
        long bits_p = 0;
        bits_p |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_p |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_p |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_p |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_p |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_p |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_p |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_p |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.p = Double.longBitsToDouble(bits_p);
        offset += 8;
        long bits_i = 0;
        bits_i |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_i |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_i |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_i |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_i |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_i |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_i |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_i |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.i = Double.longBitsToDouble(bits_i);
        offset += 8;
        long bits_d = 0;
        bits_d |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_d |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_d |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_d |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_d |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_d |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_d |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_d |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.d = Double.longBitsToDouble(bits_d);
        offset += 8;
        long bits_i_clamp = 0;
        bits_i_clamp |= (long)((inbuffer[offset + 0] & 0xFF) << (8 * 0));
        bits_i_clamp |= (long)((inbuffer[offset + 1] & 0xFF) << (8 * 1));
        bits_i_clamp |= (long)((inbuffer[offset + 2] & 0xFF) << (8 * 2));
        bits_i_clamp |= (long)((inbuffer[offset + 3] & 0xFF) << (8 * 3));
        bits_i_clamp |= (long)((inbuffer[offset + 4] & 0xFF) << (8 * 4));
        bits_i_clamp |= (long)((inbuffer[offset + 5] & 0xFF) << (8 * 5));
        bits_i_clamp |= (long)((inbuffer[offset + 6] & 0xFF) << (8 * 6));
        bits_i_clamp |= (long)((inbuffer[offset + 7] & 0xFF) << (8 * 7));
        this.i_clamp = Double.longBitsToDouble(bits_i_clamp);
        offset += 8;
        return offset;
    }

    public int serializedLength() {
        int length = 0;
        length += this.header.serializedLength();
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        length += 8;
        return length;
    }

    public java.lang.String getType(){ return "control_msgs/JointControllerState"; }
    public java.lang.String getMD5(){ return "4b645ec01dba9655d9497dae3f1abaf2"; }
    public long getID() { return 0; }
    public void setID(long id) { }
}
